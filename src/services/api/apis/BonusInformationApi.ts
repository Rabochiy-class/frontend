/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BonusDetail,
  PaginatedBonusListList,
} from '../models/index';
import {
    BonusDetailFromJSON,
    BonusDetailToJSON,
    PaginatedBonusListListFromJSON,
    PaginatedBonusListListToJSON,
} from '../models/index';

export interface BonusesListRequest {
    cityId?: number;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface BonusesRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class BonusInformationApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of available bonuses with their basic information.
     * List all available bonuses
     */
    async bonusesListRaw(requestParameters: BonusesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBonusListList>> {
        const queryParameters: any = {};

        if (requestParameters.cityId !== undefined) {
            queryParameters['city_id'] = requestParameters.cityId;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/bonuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBonusListListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of available bonuses with their basic information.
     * List all available bonuses
     */
    async bonusesList(requestParameters: BonusesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBonusListList> {
        const response = await this.bonusesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific bonus.
     * Retrieve Bonus Details
     */
    async bonusesRetrieveRaw(requestParameters: BonusesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BonusDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bonusesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/bonuses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BonusDetailFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific bonus.
     * Retrieve Bonus Details
     */
    async bonusesRetrieve(requestParameters: BonusesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BonusDetail> {
        const response = await this.bonusesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
