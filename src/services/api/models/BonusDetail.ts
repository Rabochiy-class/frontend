/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { City } from './City';
import {
    CityFromJSON,
    CityFromJSONTyped,
    CityToJSON,
} from './City';

/**
 * 
 * @export
 * @interface BonusDetail
 */
export interface BonusDetail {
    /**
     * 
     * @type {number}
     * @memberof BonusDetail
     */
    readonly id: number;
    /**
     * Минимальный размер 10x10, Максимальный размер 10000x10000
     * @type {string}
     * @memberof BonusDetail
     */
    bonusImage: string;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    partnerImage: string;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    readonly isTaken: string;
    /**
     * Максимум 48 символов
     * @type {string}
     * @memberof BonusDetail
     */
    bonusName: string;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    bonusDescription: string;
    /**
     * Максимум 29 символов
     * @type {string}
     * @memberof BonusDetail
     */
    partnerName: string;
    /**
     * 
     * @type {Date}
     * @memberof BonusDetail
     */
    dateValidity: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BonusDetail
     */
    isPublished?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BonusDetail
     */
    readonly isExpired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BonusDetail
     */
    readonly hasFeedback: boolean;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    partnerUrl: string;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    readonly state: string;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    bonusConfines: string;
    /**
     * 
     * @type {string}
     * @memberof BonusDetail
     */
    readonly promocode: string;
    /**
     * 
     * @type {number}
     * @memberof BonusDetail
     */
    w: number;
    /**
     * 
     * @type {number}
     * @memberof BonusDetail
     */
    h: number;
    /**
     * 
     * @type {Array<City>}
     * @memberof BonusDetail
     */
    cities: Array<City>;
}

/**
 * Check if a given object implements the BonusDetail interface.
 */
export function instanceOfBonusDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "bonusImage" in value;
    isInstance = isInstance && "partnerImage" in value;
    isInstance = isInstance && "isTaken" in value;
    isInstance = isInstance && "bonusName" in value;
    isInstance = isInstance && "bonusDescription" in value;
    isInstance = isInstance && "partnerName" in value;
    isInstance = isInstance && "dateValidity" in value;
    isInstance = isInstance && "isExpired" in value;
    isInstance = isInstance && "hasFeedback" in value;
    isInstance = isInstance && "partnerUrl" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "bonusConfines" in value;
    isInstance = isInstance && "promocode" in value;
    isInstance = isInstance && "w" in value;
    isInstance = isInstance && "h" in value;
    isInstance = isInstance && "cities" in value;

    return isInstance;
}

export function BonusDetailFromJSON(json: any): BonusDetail {
    return BonusDetailFromJSONTyped(json, false);
}

export function BonusDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): BonusDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'bonusImage': json['_bonus_image'],
        'partnerImage': json['partner_image'],
        'isTaken': json['is_taken'],
        'bonusName': json['bonus_name'],
        'bonusDescription': json['bonus_description'],
        'partnerName': json['partner_name'],
        'dateValidity': (new Date(json['date_validity'])),
        'isPublished': !exists(json, 'is_published') ? undefined : json['is_published'],
        'isExpired': json['is_expired'],
        'hasFeedback': json['has_feedback'],
        'partnerUrl': json['partner_url'],
        'state': json['state'],
        'bonusConfines': json['bonus_confines'],
        'promocode': json['promocode'],
        'w': json['w'],
        'h': json['h'],
        'cities': ((json['cities'] as Array<any>).map(CityFromJSON)),
    };
}

export function BonusDetailToJSON(value?: BonusDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_bonus_image': value.bonusImage,
        'partner_image': value.partnerImage,
        'bonus_name': value.bonusName,
        'bonus_description': value.bonusDescription,
        'partner_name': value.partnerName,
        'date_validity': (value.dateValidity.toISOString().substring(0,10)),
        'is_published': value.isPublished,
        'partner_url': value.partnerUrl,
        'bonus_confines': value.bonusConfines,
        'w': value.w,
        'h': value.h,
        'cities': ((value.cities as Array<any>).map(CityToJSON)),
    };
}

