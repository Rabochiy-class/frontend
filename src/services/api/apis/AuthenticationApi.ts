/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLoginCreateRequest,
  AuthLogoutCreate200Response,
  User,
} from '../models/index';
import {
    AuthLoginCreateRequestFromJSON,
    AuthLoginCreateRequestToJSON,
    AuthLogoutCreate200ResponseFromJSON,
    AuthLogoutCreate200ResponseToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AuthLoginCreateOperationRequest {
    authLoginCreateRequest?: AuthLoginCreateRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Authenticates a user with a username and password. Handles email and phone number formats for usernames.
     * User Login
     */
    async authLoginCreateRaw(requestParameters: AuthLoginCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthLoginCreateRequestToJSON(requestParameters.authLoginCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Authenticates a user with a username and password. Handles email and phone number formats for usernames.
     * User Login
     */
    async authLoginCreate(requestParameters: AuthLoginCreateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authLoginCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs out the current user, invalidating their authentication token.
     * User Logout
     */
    async authLogoutCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLogoutCreate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLogoutCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Logs out the current user, invalidating their authentication token.
     * User Logout
     */
    async authLogoutCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLogoutCreate200Response> {
        const response = await this.authLogoutCreateRaw(initOverrides);
        return await response.value();
    }

}
