/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BloodStationPhone } from './BloodStationPhone';
import {
    BloodStationPhoneFromJSON,
    BloodStationPhoneFromJSONTyped,
    BloodStationPhoneToJSON,
} from './BloodStationPhone';
import type { BloodStationSchedule } from './BloodStationSchedule';
import {
    BloodStationScheduleFromJSON,
    BloodStationScheduleFromJSONTyped,
    BloodStationScheduleToJSON,
} from './BloodStationSchedule';
import type { City } from './City';
import {
    CityFromJSON,
    CityFromJSONTyped,
    CityToJSON,
} from './City';
import type { PlusMinusUniversalEnum } from './PlusMinusUniversalEnum';
import {
    PlusMinusUniversalEnumFromJSON,
    PlusMinusUniversalEnumFromJSONTyped,
    PlusMinusUniversalEnumToJSON,
} from './PlusMinusUniversalEnum';

/**
 * 
 * @export
 * @interface BloodStation
 */
export interface BloodStation {
    /**
     * 
     * @type {number}
     * @memberof BloodStation
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof BloodStation
     */
    cityId: number;
    /**
     * 
     * @type {City}
     * @memberof BloodStation
     */
    city: City;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    readonly lat: string;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    readonly lng: string;
    /**
     * 
     * @type {Array<BloodStationSchedule>}
     * @memberof BloodStation
     */
    schedule: Array<BloodStationSchedule>;
    /**
     * 
     * @type {Array<BloodStationPhone>}
     * @memberof BloodStation
     */
    phoneNumbers: Array<BloodStationPhone>;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    readonly bloodGroup: string;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    parserUrl?: string | null;
    /**
     * Данные будут обновляться каждый день в час ночи.
     * @type {boolean}
     * @memberof BloodStation
     */
    isGetFromParser?: boolean;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    oPlus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    oMinus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    aPlus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    aMinus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    bPlus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    bMinus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    abPlus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    abMinus?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    blood?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    plasma?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    platelets?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    erythrocytes?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {PlusMinusUniversalEnum}
     * @memberof BloodStation
     */
    leukocytes?: PlusMinusUniversalEnum;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    site?: string;
    /**
     * Устаревшее поле
     * @type {string}
     * @memberof BloodStation
     */
    phones?: string;
    /**
     * 
     * @type {string}
     * @memberof BloodStation
     */
    email?: string;
    /**
     * Устаревшее поле
     * @type {string}
     * @memberof BloodStation
     */
    worktime?: string;
    /**
     * Центры крови принимает доноров без местной прописки
     * @type {boolean}
     * @memberof BloodStation
     */
    withoutRegistration?: boolean;
    /**
     * Здесь вы можете войти в <a href="https://wmdd2020.donorsearch.org" target="_blank">регистр доноров костного мозга</a>
     * @type {boolean}
     * @memberof BloodStation
     */
    withTyping?: boolean;
    /**
     * Сдавая в этом центре крови можно получить звание Почётного донора Москвы
     * @type {boolean}
     * @memberof BloodStation
     */
    forMoscow?: boolean;
    /**
     * Если данный центр крови больше не существует, то не будет показан в поиске, где сдать кровь. Однако при добавлении донаций, доноры могут найти этот центр крови, чтобы отметить свои старые донации.
     * @type {boolean}
     * @memberof BloodStation
     */
    closed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BloodStation
     */
    priority?: number;
}

/**
 * Check if a given object implements the BloodStation interface.
 */
export function instanceOfBloodStation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "cityId" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "lat" in value;
    isInstance = isInstance && "lng" in value;
    isInstance = isInstance && "schedule" in value;
    isInstance = isInstance && "phoneNumbers" in value;
    isInstance = isInstance && "bloodGroup" in value;
    isInstance = isInstance && "title" in value;

    return isInstance;
}

export function BloodStationFromJSON(json: any): BloodStation {
    return BloodStationFromJSONTyped(json, false);
}

export function BloodStationFromJSONTyped(json: any, ignoreDiscriminator: boolean): BloodStation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'cityId': json['city_id'],
        'city': CityFromJSON(json['city']),
        'lat': json['lat'],
        'lng': json['lng'],
        'schedule': ((json['schedule'] as Array<any>).map(BloodStationScheduleFromJSON)),
        'phoneNumbers': ((json['phone_numbers'] as Array<any>).map(BloodStationPhoneFromJSON)),
        'bloodGroup': json['blood_group'],
        'title': json['title'],
        'parserUrl': !exists(json, 'parser_url') ? undefined : json['parser_url'],
        'isGetFromParser': !exists(json, 'is_get_from_parser') ? undefined : json['is_get_from_parser'],
        'oPlus': !exists(json, 'o_plus') ? undefined : PlusMinusUniversalEnumFromJSON(json['o_plus']),
        'oMinus': !exists(json, 'o_minus') ? undefined : PlusMinusUniversalEnumFromJSON(json['o_minus']),
        'aPlus': !exists(json, 'a_plus') ? undefined : PlusMinusUniversalEnumFromJSON(json['a_plus']),
        'aMinus': !exists(json, 'a_minus') ? undefined : PlusMinusUniversalEnumFromJSON(json['a_minus']),
        'bPlus': !exists(json, 'b_plus') ? undefined : PlusMinusUniversalEnumFromJSON(json['b_plus']),
        'bMinus': !exists(json, 'b_minus') ? undefined : PlusMinusUniversalEnumFromJSON(json['b_minus']),
        'abPlus': !exists(json, 'ab_plus') ? undefined : PlusMinusUniversalEnumFromJSON(json['ab_plus']),
        'abMinus': !exists(json, 'ab_minus') ? undefined : PlusMinusUniversalEnumFromJSON(json['ab_minus']),
        'blood': !exists(json, 'blood') ? undefined : PlusMinusUniversalEnumFromJSON(json['blood']),
        'plasma': !exists(json, 'plasma') ? undefined : PlusMinusUniversalEnumFromJSON(json['plasma']),
        'platelets': !exists(json, 'platelets') ? undefined : PlusMinusUniversalEnumFromJSON(json['platelets']),
        'erythrocytes': !exists(json, 'erythrocytes') ? undefined : PlusMinusUniversalEnumFromJSON(json['erythrocytes']),
        'leukocytes': !exists(json, 'leukocytes') ? undefined : PlusMinusUniversalEnumFromJSON(json['leukocytes']),
        'address': !exists(json, 'address') ? undefined : json['address'],
        'site': !exists(json, 'site') ? undefined : json['site'],
        'phones': !exists(json, 'phones') ? undefined : json['phones'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'worktime': !exists(json, 'worktime') ? undefined : json['worktime'],
        'withoutRegistration': !exists(json, 'without_registration') ? undefined : json['without_registration'],
        'withTyping': !exists(json, 'with_typing') ? undefined : json['with_typing'],
        'forMoscow': !exists(json, 'for_moscow') ? undefined : json['for_moscow'],
        'closed': !exists(json, 'closed') ? undefined : json['closed'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
    };
}

export function BloodStationToJSON(value?: BloodStation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'city_id': value.cityId,
        'city': CityToJSON(value.city),
        'schedule': ((value.schedule as Array<any>).map(BloodStationScheduleToJSON)),
        'phone_numbers': ((value.phoneNumbers as Array<any>).map(BloodStationPhoneToJSON)),
        'title': value.title,
        'parser_url': value.parserUrl,
        'is_get_from_parser': value.isGetFromParser,
        'o_plus': PlusMinusUniversalEnumToJSON(value.oPlus),
        'o_minus': PlusMinusUniversalEnumToJSON(value.oMinus),
        'a_plus': PlusMinusUniversalEnumToJSON(value.aPlus),
        'a_minus': PlusMinusUniversalEnumToJSON(value.aMinus),
        'b_plus': PlusMinusUniversalEnumToJSON(value.bPlus),
        'b_minus': PlusMinusUniversalEnumToJSON(value.bMinus),
        'ab_plus': PlusMinusUniversalEnumToJSON(value.abPlus),
        'ab_minus': PlusMinusUniversalEnumToJSON(value.abMinus),
        'blood': PlusMinusUniversalEnumToJSON(value.blood),
        'plasma': PlusMinusUniversalEnumToJSON(value.plasma),
        'platelets': PlusMinusUniversalEnumToJSON(value.platelets),
        'erythrocytes': PlusMinusUniversalEnumToJSON(value.erythrocytes),
        'leukocytes': PlusMinusUniversalEnumToJSON(value.leukocytes),
        'address': value.address,
        'site': value.site,
        'phones': value.phones,
        'email': value.email,
        'worktime': value.worktime,
        'without_registration': value.withoutRegistration,
        'with_typing': value.withTyping,
        'for_moscow': value.forMoscow,
        'closed': value.closed,
        'priority': value.priority,
    };
}

