/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BloodClassF07Enum } from './BloodClassF07Enum';
import {
    BloodClassF07EnumFromJSON,
    BloodClassF07EnumFromJSONTyped,
    BloodClassF07EnumToJSON,
} from './BloodClassF07Enum';
import type { BloodStation } from './BloodStation';
import {
    BloodStationFromJSON,
    BloodStationFromJSONTyped,
    BloodStationToJSON,
} from './BloodStation';
import type { City } from './City';
import {
    CityFromJSON,
    CityFromJSONTyped,
    CityToJSON,
} from './City';
import type { DonationPlanStatusEnum } from './DonationPlanStatusEnum';
import {
    DonationPlanStatusEnumFromJSON,
    DonationPlanStatusEnumFromJSONTyped,
    DonationPlanStatusEnumToJSON,
} from './DonationPlanStatusEnum';
import type { PatchedDonationPlanPaymentType } from './PatchedDonationPlanPaymentType';
import {
    PatchedDonationPlanPaymentTypeFromJSON,
    PatchedDonationPlanPaymentTypeFromJSONTyped,
    PatchedDonationPlanPaymentTypeToJSON,
} from './PatchedDonationPlanPaymentType';

/**
 * 
 * @export
 * @interface PatchedDonationPlan
 */
export interface PatchedDonationPlan {
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedDonationPlan
     */
    readonly event?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    bloodStationId?: number | null;
    /**
     * 
     * @type {BloodStation}
     * @memberof PatchedDonationPlan
     */
    readonly bloodStation?: BloodStation;
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    cityId?: number | null;
    /**
     * 
     * @type {City}
     * @memberof PatchedDonationPlan
     */
    readonly city?: City;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDonationPlan
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDonationPlan
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    objectId?: number | null;
    /**
     * 
     * @type {BloodClassF07Enum}
     * @memberof PatchedDonationPlan
     */
    bloodClass?: BloodClassF07Enum;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDonationPlan
     */
    planDate?: Date;
    /**
     * 
     * @type {PatchedDonationPlanPaymentType}
     * @memberof PatchedDonationPlan
     */
    paymentType?: PatchedDonationPlanPaymentType | null;
    /**
     * 
     * @type {DonationPlanStatusEnum}
     * @memberof PatchedDonationPlan
     */
    status?: DonationPlanStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedDonationPlan
     */
    isOut?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    readonly user?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    contentType?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedDonationPlan
     */
    donation?: number | null;
}

/**
 * Check if a given object implements the PatchedDonationPlan interface.
 */
export function instanceOfPatchedDonationPlan(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedDonationPlanFromJSON(json: any): PatchedDonationPlan {
    return PatchedDonationPlanFromJSONTyped(json, false);
}

export function PatchedDonationPlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedDonationPlan {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'event': !exists(json, 'event') ? undefined : json['event'],
        'bloodStationId': !exists(json, 'blood_station_id') ? undefined : json['blood_station_id'],
        'bloodStation': !exists(json, 'blood_station') ? undefined : BloodStationFromJSON(json['blood_station']),
        'cityId': !exists(json, 'city_id') ? undefined : json['city_id'],
        'city': !exists(json, 'city') ? undefined : CityFromJSON(json['city']),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'objectId': !exists(json, 'object_id') ? undefined : json['object_id'],
        'bloodClass': !exists(json, 'blood_class') ? undefined : BloodClassF07EnumFromJSON(json['blood_class']),
        'planDate': !exists(json, 'plan_date') ? undefined : (new Date(json['plan_date'])),
        'paymentType': !exists(json, 'payment_type') ? undefined : PatchedDonationPlanPaymentTypeFromJSON(json['payment_type']),
        'status': !exists(json, 'status') ? undefined : DonationPlanStatusEnumFromJSON(json['status']),
        'isOut': !exists(json, 'is_out') ? undefined : json['is_out'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'contentType': !exists(json, 'content_type') ? undefined : json['content_type'],
        'donation': !exists(json, 'donation') ? undefined : json['donation'],
    };
}

export function PatchedDonationPlanToJSON(value?: PatchedDonationPlan | null): any {

    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blood_station_id': value.bloodStationId,
        'city_id': value.cityId,
        'object_id': value.objectId,
        'blood_class': BloodClassF07EnumToJSON(value.bloodClass),
        'plan_date': value.planDate === undefined ? undefined : (value.planDate.toISOString().substring(0,10)),
        'payment_type': PatchedDonationPlanPaymentTypeToJSON(value.paymentType),
        'status': DonationPlanStatusEnumToJSON(value.status),
        'is_out': value.isOut,
        'content_type': value.contentType,
        'donation': value.donation,
    };
}

