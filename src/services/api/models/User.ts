/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { City } from './City';
import {
    CityFromJSON,
    CityFromJSONTyped,
    CityToJSON,
} from './City';
import type { DonationAgg } from './DonationAgg';
import {
    DonationAggFromJSON,
    DonationAggFromJSONTyped,
    DonationAggToJSON,
} from './DonationAgg';
import type { DonorStatus } from './DonorStatus';
import {
    DonorStatusFromJSON,
    DonorStatusFromJSONTyped,
    DonorStatusToJSON,
} from './DonorStatus';
import type { InlinePicture } from './InlinePicture';
import {
    InlinePictureFromJSON,
    InlinePictureFromJSONTyped,
    InlinePictureToJSON,
} from './InlinePicture';
import type { SimpleUserSocialAuth } from './SimpleUserSocialAuth';
import {
    SimpleUserSocialAuthFromJSON,
    SimpleUserSocialAuthFromJSONTyped,
    SimpleUserSocialAuthToJSON,
} from './SimpleUserSocialAuth';
import type { TopUsers } from './TopUsers';
import {
    TopUsersFromJSON,
    TopUsersFromJSONTyped,
    TopUsersToJSON,
} from './TopUsers';
import type { UserGender } from './UserGender';
import {
    UserGenderFromJSON,
    UserGenderFromJSONTyped,
    UserGenderToJSON,
} from './UserGender';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    readonly dateJoined: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    maidenName?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    birthDate?: Date | null;
    /**
     * 
     * @type {UserGender}
     * @memberof User
     */
    gender?: UserGender;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly phone: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    loginViaPhone?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    about?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    cityId: number;
    /**
     * 
     * @type {City}
     * @memberof User
     */
    readonly city: City;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isPin20?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isPin100?: boolean;
    /**
     * 
     * @type {DonationAgg}
     * @memberof User
     */
    readonly donationAgg: DonationAgg;
    /**
     * 
     * @type {Array<SimpleUserSocialAuth>}
     * @memberof User
     */
    readonly socials: Array<SimpleUserSocialAuth>;
    /**
     * 
     * @type {InlinePicture}
     * @memberof User
     */
    readonly photo: InlinePicture;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    photoId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly nextDonationDate: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly nextDonation: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly bloodGroup: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly hasPassword: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly isEmailVerified: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly isPhoneVerified: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    emailReconfirmedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    phoneReconfirmedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly legacyAvatar: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly startDonorYear: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly referalCode: string;
    /**
     * 
     * @type {TopUsers}
     * @memberof User
     */
    readonly parentUser: TopUsers;
    /**
     * 
     * @type {Array<TopUsers>}
     * @memberof User
     */
    readonly invitedUsers: Array<TopUsers>;
    /**
     * 
     * @type {DonorStatus}
     * @memberof User
     */
    readonly donorStatus: DonorStatus;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly managedOrganizations: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly joinedEvents: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly joinedOrganizations: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    donorCertificate?: boolean;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "dateJoined" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "phone" in value;
    isInstance = isInstance && "cityId" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "donationAgg" in value;
    isInstance = isInstance && "socials" in value;
    isInstance = isInstance && "photo" in value;
    isInstance = isInstance && "nextDonationDate" in value;
    isInstance = isInstance && "nextDonation" in value;
    isInstance = isInstance && "bloodGroup" in value;
    isInstance = isInstance && "hasPassword" in value;
    isInstance = isInstance && "isEmailVerified" in value;
    isInstance = isInstance && "isPhoneVerified" in value;
    isInstance = isInstance && "legacyAvatar" in value;
    isInstance = isInstance && "startDonorYear" in value;
    isInstance = isInstance && "referalCode" in value;
    isInstance = isInstance && "parentUser" in value;
    isInstance = isInstance && "invitedUsers" in value;
    isInstance = isInstance && "donorStatus" in value;
    isInstance = isInstance && "managedOrganizations" in value;
    isInstance = isInstance && "joinedEvents" in value;
    isInstance = isInstance && "joinedOrganizations" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'dateJoined': (new Date(json['date_joined'])),
        'username': json['username'],
        'firstName': json['first_name'],
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'middleName': !exists(json, 'middle_name') ? undefined : json['middle_name'],
        'maidenName': !exists(json, 'maiden_name') ? undefined : json['maiden_name'],
        'birthDate': !exists(json, 'birth_date') ? undefined : (json['birth_date'] === null ? null : new Date(json['birth_date'])),
        'gender': !exists(json, 'gender') ? undefined : UserGenderFromJSON(json['gender']),
        'email': json['email'],
        'phone': json['phone'],
        'loginViaPhone': !exists(json, 'login_via_phone') ? undefined : json['login_via_phone'],
        'about': !exists(json, 'about') ? undefined : json['about'],
        'cityId': json['city_id'],
        'city': CityFromJSON(json['city']),
        'isPin20': !exists(json, 'is_pin_20') ? undefined : json['is_pin_20'],
        'isPin100': !exists(json, 'is_pin_100') ? undefined : json['is_pin_100'],
        'donationAgg': DonationAggFromJSON(json['donation_agg']),
        'socials': ((json['socials'] as Array<any>).map(SimpleUserSocialAuthFromJSON)),
        'photo': InlinePictureFromJSON(json['photo']),
        'photoId': !exists(json, 'photo_id') ? undefined : json['photo_id'],
        'nextDonationDate': json['next_donation_date'],
        'nextDonation': json['next_donation'],
        'bloodGroup': json['blood_group'],
        'hasPassword': json['has_password'],
        'isEmailVerified': json['is_email_verified'],
        'isPhoneVerified': json['is_phone_verified'],
        'emailReconfirmedAt': !exists(json, 'email_reconfirmed_at') ? undefined : (json['email_reconfirmed_at'] === null ? null : new Date(json['email_reconfirmed_at'])),
        'phoneReconfirmedAt': !exists(json, 'phone_reconfirmed_at') ? undefined : (json['phone_reconfirmed_at'] === null ? null : new Date(json['phone_reconfirmed_at'])),
        'legacyAvatar': json['legacy_avatar'],
        'startDonorYear': json['start_donor_year'],
        'referalCode': json['referal_code'],
        'parentUser': TopUsersFromJSON(json['parent_user']),
        'invitedUsers': ((json['invited_users'] as Array<any>).map(TopUsersFromJSON)),
        'donorStatus': DonorStatusFromJSON(json['donor_status']),
        'managedOrganizations': json['managed_organizations'],
        'joinedEvents': json['joined_events'],
        'joinedOrganizations': json['joined_organizations'],
        'donorCertificate': !exists(json, 'donor_certificate') ? undefined : json['donor_certificate'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'middle_name': value.middleName,
        'maiden_name': value.maidenName,
        'birth_date': value.birthDate === undefined ? undefined : (value.birthDate === null ? null : value.birthDate.toISOString().substring(0,10)),
        'gender': UserGenderToJSON(value.gender),
        'login_via_phone': value.loginViaPhone,
        'about': value.about,
        'city_id': value.cityId,
        'is_pin_20': value.isPin20,
        'is_pin_100': value.isPin100,
        'photo_id': value.photoId,
        'email_reconfirmed_at': value.emailReconfirmedAt === undefined ? undefined : (value.emailReconfirmedAt === null ? null : value.emailReconfirmedAt.toISOString()),
        'phone_reconfirmed_at': value.phoneReconfirmedAt === undefined ? undefined : (value.phoneReconfirmedAt === null ? null : value.phoneReconfirmedAt.toISOString()),
        'donor_certificate': value.donorCertificate,
    };
}

