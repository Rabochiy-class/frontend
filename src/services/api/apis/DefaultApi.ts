/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailVerificationSerialzier,
  RegisterNewUser200Response,
  Registration,
  User,
} from '../models/index';
import {
    EmailVerificationSerialzierFromJSON,
    EmailVerificationSerialzierToJSON,
    RegisterNewUser200ResponseFromJSON,
    RegisterNewUser200ResponseToJSON,
    RegistrationFromJSON,
    RegistrationToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AuthConfirmEmailRegCreateRequest {
    emailVerificationSerialzier: EmailVerificationSerialzier;
}

export interface RegisterNewUserRequest {
    registration?: Registration;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Confirms a user\'s email address during the registration process.
     * Confirm Email on Registration
     */
    async authConfirmEmailRegCreateRaw(requestParameters: AuthConfirmEmailRegCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.emailVerificationSerialzier === null || requestParameters.emailVerificationSerialzier === undefined) {
            throw new runtime.RequiredError('emailVerificationSerialzier','Required parameter requestParameters.emailVerificationSerialzier was null or undefined when calling authConfirmEmailRegCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/confirm_email_reg`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailVerificationSerialzierToJSON(requestParameters.emailVerificationSerialzier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Confirms a user\'s email address during the registration process.
     * Confirm Email on Registration
     */
    async authConfirmEmailRegCreate(requestParameters: AuthConfirmEmailRegCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authConfirmEmailRegCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registers a new user, either through email or phone number.
     * User Registration
     */
    async registerNewUserRaw(requestParameters: RegisterNewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterNewUser200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/registration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationToJSON(requestParameters.registration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterNewUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Registers a new user, either through email or phone number.
     * User Registration
     */
    async registerNewUser(requestParameters: RegisterNewUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterNewUser200Response> {
        const response = await this.registerNewUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
