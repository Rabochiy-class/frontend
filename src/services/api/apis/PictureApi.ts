/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Picture,
} from '../models/index';
import {
    PictureFromJSON,
    PictureToJSON,
} from '../models/index';

export interface PictureCreateRequest {
    id: number;
    image: string;
    dateAdded: Date;
}

/**
 * 
 */
export class PictureApi extends runtime.BaseAPI {

    /**
     * Accepts multipart form with the only field called `image`, or a raw body, like this:  ``` curl       -X PUT       -H \"Authorization: Token 50152a5d7af1fab20a87744e2024b2a110916edc\"       -H \"Content-Disposition: attachment; filename=filename.jpg\"       --data-binary @\"/Downloads/tsjh.jpg\"       http://127.0.0.1:8000/api/picture/ ```
     */
    async pictureCreateRaw(requestParameters: PictureCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Picture>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pictureCreate.');
        }

        if (requestParameters.image === null || requestParameters.image === undefined) {
            throw new runtime.RequiredError('image','Required parameter requestParameters.image was null or undefined when calling pictureCreate.');
        }

        if (requestParameters.dateAdded === null || requestParameters.dateAdded === undefined) {
            throw new runtime.RequiredError('dateAdded','Required parameter requestParameters.dateAdded was null or undefined when calling pictureCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.image !== undefined) {
            formParams.append('image', requestParameters.image as any);
        }

        if (requestParameters.dateAdded !== undefined) {
            formParams.append('date_added', requestParameters.dateAdded as any);
        }

        const response = await this.request({
            path: `/api/picture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PictureFromJSON(jsonValue));
    }

    /**
     * Accepts multipart form with the only field called `image`, or a raw body, like this:  ``` curl       -X PUT       -H \"Authorization: Token 50152a5d7af1fab20a87744e2024b2a110916edc\"       -H \"Content-Disposition: attachment; filename=filename.jpg\"       --data-binary @\"/Downloads/tsjh.jpg\"       http://127.0.0.1:8000/api/picture/ ```
     */
    async pictureCreate(requestParameters: PictureCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Picture> {
        const response = await this.pictureCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
