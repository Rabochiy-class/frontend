/* tslint:disable */
/* eslint-disable */
/**
 * TelegramWebDonorSearch API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthCheckSmsCodeCreate200Response,
  AuthCheckSmsCodeCreateRequest,
  AuthLogoutCreate200Response,
  AuthRecoverCreate200Response,
  AuthRecoverCreate400Response,
  AuthRecoverCreateRequest,
  AuthResendCodeCreateRequest,
  ResetPassword,
  User,
} from '../models/index';
import {
    AuthCheckSmsCodeCreate200ResponseFromJSON,
    AuthCheckSmsCodeCreate200ResponseToJSON,
    AuthCheckSmsCodeCreateRequestFromJSON,
    AuthCheckSmsCodeCreateRequestToJSON,
    AuthLogoutCreate200ResponseFromJSON,
    AuthLogoutCreate200ResponseToJSON,
    AuthRecoverCreate200ResponseFromJSON,
    AuthRecoverCreate200ResponseToJSON,
    AuthRecoverCreate400ResponseFromJSON,
    AuthRecoverCreate400ResponseToJSON,
    AuthRecoverCreateRequestFromJSON,
    AuthRecoverCreateRequestToJSON,
    AuthResendCodeCreateRequestFromJSON,
    AuthResendCodeCreateRequestToJSON,
    ResetPasswordFromJSON,
    ResetPasswordToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AuthCheckSmsCodeCreateOperationRequest {
    authCheckSmsCodeCreateRequest?: AuthCheckSmsCodeCreateRequest;
}

export interface AuthRecoverCreateOperationRequest {
    authRecoverCreateRequest?: AuthRecoverCreateRequest;
}

export interface AuthResendCodeCreateOperationRequest {
    authResendCodeCreateRequest?: AuthResendCodeCreateRequest;
}

export interface AuthResendEmailCodeCreateRequest {
    authResendCodeCreateRequest?: AuthResendCodeCreateRequest;
}

export interface AuthSetPasswordCreateRequest {
    resetPassword: ResetPassword;
}

/**
 * 
 */
export class AccountRecoveryApi extends runtime.BaseAPI {

    /**
     * Verifies an SMS code sent to a user’s phone number.
     * Check SMS Code
     */
    async authCheckSmsCodeCreateRaw(requestParameters: AuthCheckSmsCodeCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCheckSmsCodeCreate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/check_sms_code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthCheckSmsCodeCreateRequestToJSON(requestParameters.authCheckSmsCodeCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthCheckSmsCodeCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Verifies an SMS code sent to a user’s phone number.
     * Check SMS Code
     */
    async authCheckSmsCodeCreate(requestParameters: AuthCheckSmsCodeCreateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCheckSmsCodeCreate200Response> {
        const response = await this.authCheckSmsCodeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles account recovery through email or phone. The method of recovery depends on the user\'s registered login type. It sends an email or SMS with recovery instructions.
     * Account Recovery
     */
    async authRecoverCreateRaw(requestParameters: AuthRecoverCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthRecoverCreate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/recover`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRecoverCreateRequestToJSON(requestParameters.authRecoverCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthRecoverCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Handles account recovery through email or phone. The method of recovery depends on the user\'s registered login type. It sends an email or SMS with recovery instructions.
     * Account Recovery
     */
    async authRecoverCreate(requestParameters: AuthRecoverCreateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthRecoverCreate200Response> {
        const response = await this.authRecoverCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resends a phone verification code to the user.
     * Resend Phone Verification Code
     */
    async authResendCodeCreateRaw(requestParameters: AuthResendCodeCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLogoutCreate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/resend_code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthResendCodeCreateRequestToJSON(requestParameters.authResendCodeCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLogoutCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Resends a phone verification code to the user.
     * Resend Phone Verification Code
     */
    async authResendCodeCreate(requestParameters: AuthResendCodeCreateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLogoutCreate200Response> {
        const response = await this.authResendCodeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a new email confirmation code to the user.
     * Resend Email Confirmation Code
     */
    async authResendEmailCodeCreateRaw(requestParameters: AuthResendEmailCodeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLogoutCreate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/resend_email_code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthResendCodeCreateRequestToJSON(requestParameters.authResendCodeCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLogoutCreate200ResponseFromJSON(jsonValue));
    }

    /**
     * Sends a new email confirmation code to the user.
     * Resend Email Confirmation Code
     */
    async authResendEmailCodeCreate(requestParameters: AuthResendEmailCodeCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLogoutCreate200Response> {
        const response = await this.authResendEmailCodeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a user to set a new password, usually as part of a password reset process.
     * Set Password
     */
    async authSetPasswordCreateRaw(requestParameters: AuthSetPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.resetPassword === null || requestParameters.resetPassword === undefined) {
            throw new runtime.RequiredError('resetPassword','Required parameter requestParameters.resetPassword was null or undefined when calling authSetPasswordCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/set_password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordToJSON(requestParameters.resetPassword),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Allows a user to set a new password, usually as part of a password reset process.
     * Set Password
     */
    async authSetPasswordCreate(requestParameters: AuthSetPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authSetPasswordCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
